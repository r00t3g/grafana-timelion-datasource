{"version":3,"sources":["../src/datasource.js"],"names":["_","TimelionDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","jsonData","esVersion","type","url","name","q","options","headers","datasourceRequest","query","buildQueryParameters","oThis","targets","length","when","data","reqs","map","queries","request","method","then","readTimlionSeries","response","list","ix","label","d","all","flatten","series","sheet","testQuery","status","message","title","body","target","annotation","scopedVars","novalue","parseFloat","createAnnotations","reduce","result","filter","datapoints","dd","dp","timestamp","acc","v","concat","text","match","s","replace","RegExp","m","regexp","exec","tags","annotationReplace","split","time","queryResult","res","Object","assign","enable","annotationInfo","r","interpolated","range","timeRange","i","value","isObject","conditions","condition","includes","key","operator","join","variables","variable","filters","forEach","push","getAdHocFilterConditionOperator","find","filterOperator","keys","trim","hide","adHoc","getAdHocFilterName","getAdHocFilterConditions","queryTpl","from","utc","format","to","expandTemplate","interval","selectedInterval","current","intervalRx","replacement","intervalParseRx","intervalMatches","intervalValue","t","indexOf","intervalGroups","groupBy","intervals","filterStr","buildAdhocString","filterRx","valueRx","cloneDeep"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class TimelionDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n        instanceSettings.jsonData = instanceSettings.jsonData || {};\n        this.instanceSettings = instanceSettings;\n        this.esVersion = instanceSettings.jsonData.esVersion || \"5.3.0\";\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.timeSrv = timeSrv;\n    }\n\n    request(options) {\n        options.headers = {\n            \"kbn-version\": this.esVersion,\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        };\n        return this.backendSrv.datasourceRequest(options);\n    }\n\n    query(options) {\n        var query = this.buildQueryParameters(options);\n        var oThis = this;\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n        var reqs = _.map(options.queries,\n            query => oThis.request({\n                url: this.url + '/run',\n                data: query,\n                method: 'POST'\n            })\n                .then(response => oThis.readTimlionSeries(response)\n                    .map((list, ix) => ({\n                        \"target\": list.label,\n                        \"datapoints\": _.map(list.data, d => [d[1], d[0]])\n                    }))));\n        return this.q.all(reqs).then(series => ({\"data\": _.flatten(series)}))\n    }\n\n    readTimlionSeries(response) {\n        return _.flatten(_.map(response.data.sheet, sheet => sheet.list));\n    }\n\n    testDatasource() {\n        var testQuery = {\n            \"sheet\": [\".es(*)\"],\n            \"time\": {\n                \"from\": \"now-1m\",\n                \"to\": \"now\",\n                \"mode\": \"quick\",\n                \"interval\": \"auto\",\n                \"timezone\": \"Europe/Berlin\"\n            }\n        };\n        return this.request({\n            url: this.url + '/run',\n            method: 'POST',\n            data: testQuery\n        }).then(response => {\n            if (response.status === 200) {\n                return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n            } else {\n                return {status: \"error\", message: response.body, title: `Error ${response.status}`};\n            }\n        });\n    }\n\n    annotationQuery(options) {\n        options.targets = [{target: options.annotation.query}];\n        options.scopedVars = {};\n        var novalue = parseFloat(options.annotation.novalue || 0);\n        return this.query(options)\n            .then(result => this.createAnnotations(options,\n                _.reduce(\n                    _.map(result.data, d =>\n                        _.map(_.filter(d.datapoints, dd => dd[0] !== novalue), dp =>\n                            ({\n                                target: `${d.target}: ${dp[0]}`,\n                                timestamp: dp[1]\n                            }))\n                    )\n                    , (acc, v) => acc.concat(v), [])\n                )\n            );\n    }\n\n    annotationReplace(text, match) {\n        if (!text || !match) return text;\n        for (var s in match) {\n            text = text.replace(new RegExp(`\\\\$${s}`, 'g'), match[s]);\n        }\n        return this.templateSrv.replace(text, null, 'regex');\n    }\n\n    annotationInfo(options, result) {\n        var m = options.regexp\n            ? new RegExp(options.regexp).exec(result.target)\n            : [];\n\n        const tags = (options.tags && options.tags.length) ?\n            this.annotationReplace(options.tags, m).split(',') :\n            null;\n\n        return {\n            title: this.annotationReplace(options.title, m),\n            time: result.timestamp,\n            text: this.annotationReplace(options.text, m),\n            tags: tags\n        };\n    }\n\n    createAnnotations(options, queryResult) {\n        var res = _.map(queryResult, r => Object.assign({\n                \"annotation\": {\n                    \"name\": options.annotation.name,\n                    \"enabled\": options.annotation.enable,\n                    \"datasource\": \"Timelion\",\n                }\n            },\n            this.annotationInfo(options.annotation, r)\n        ));\n        return res;\n    }\n\n    metricFindQuery(query) {\n        var interpolated = {\n            target: this.templateSrv.replace(query, null, 'regex')\n        };\n        return this[\"query\"]({\n            targets: [interpolated],\n            range: this.timeSrv.timeRange(),\n            scopedVars: {}\n        })\n            .then(series => {\n                return _.map(series.data, d => ({text: d.target}));\n            });\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            if (d && d.text && d.value) {\n                return {text: d.text, value: d.value};\n            } else if (_.isObject(d)) {\n                return {text: d, value: i};\n            }\n            return {text: d, value: d};\n        });\n    }\n\n    buildAdhocString(conditions) {\n        return conditions.map((condition) => {\n            const value = condition.value.includes(' ') ? `\"${condition.value}\"` : `${condition.value}`;\n            return `${condition.key}${condition.operator}${value}`;\n        }).join(' AND ');\n    }\n\n    getAdHocFilterConditions() {\n        const conditions = [];\n\n        this.templateSrv.variables\n            .filter(variable => variable.type === 'adhoc' && variable.filters)\n            .forEach((variable) => {\n                const {filters = []} = variable;\n\n                filters.forEach((filter) => {\n                    const {key, value = ''} = filter;\n\n                    conditions.push({\n                        key: filter.operator === \"!=\" ? `-${key}` : key,\n                        value,\n                        operator: this.getAdHocFilterConditionOperator(filter.operator)\n                    });\n                });\n            });\n\n        return conditions;\n    }\n\n    getAdHocFilterName() {\n        const {name = null} = this.templateSrv.variables.find(variable => variable.type === 'adhoc') || {};\n\n        return name;\n    }\n\n    getAdHocFilterConditionOperator(filterOperator) {\n        switch (filterOperator) {\n            case '>':\n                return ':>';\n            case '<':\n                return ':<';\n            case '>=':\n                return ':>=';\n            case '<=':\n                return ':<=';\n            default:\n                return ':';\n        }\n    }\n\n    expandTemplate(target, options) {\n        _.map(\n            Object.keys(options.scopedVars),\n            key => target = target.replace(\"$\" + key, options.scopedVars[key].value)\n        );\n\n        return this.templateSrv\n            .replace(target, true)\n            .replace(/\\r\\n|\\r|\\n/mg, \"\")\n            .trim();\n    }\n\n    buildQueryParameters(options) {\n        var oThis = this;\n        //remove placeholder targets\n        options.targets = _.filter(options.targets, target => {\n            return target.target !== 'select metric' && !target.hide;\n        });\n\n        const adHoc = {\n            name: this.getAdHocFilterName(),\n            conditions: this.getAdHocFilterConditions(),\n        };\n\n        const queryTpl = {\n            \"sheet\": null,\n            \"time\": {\n                \"from\": options.range.from.utc().format(\"YYYY-MM-DDTHH:mm:ss\\\\Z\"),\n                \"interval\": \"auto\",\n                \"mode\": \"absolute\",\n                \"timezone\": \"GMT\",\n                \"to\": options.range.to.utc().format(\"YYYY-MM-DDTHH:mm:ss\\\\Z\")\n            }\n        };\n\n        let targets = _.map(options.targets, target => {\n            return {\n                target: this.expandTemplate(target.target, options),\n                interval: this.expandTemplate(target.interval || \"auto\", options)\n            };\n        });\n\n        const selectedInterval = this.templateSrv.variables.find(variable => variable.type === 'interval');\n        if (selectedInterval && selectedInterval.current) {\n            const {value, name} = selectedInterval.current;\n            const intervalRx = new RegExp(`\\\\.scale_interval\\\\(${name}\\\\)`, 'g');\n            const replacement = value === 'auto'\n                ? '1h'\n                : value;\n\n            targets.forEach((target) => {\n                target.target = target.target.replace(intervalRx, `.scale_interval(${replacement})`);\n            });\n        }\n        const intervalParseRx = /\\.scale_interval\\((\\d+\\w+)\\)/\n        targets.forEach((target) => {\n            const intervalMatches = target.target.match(intervalParseRx);\n            if (!intervalMatches) {\n                return;\n            }\n\n            const intervalValue = intervalMatches[1];\n            target.interval = intervalValue;\n        })\n\n        const variables = _.filter(\n            _.map(options.targets, t => this.expandTemplate(t.target, options)),\n            t => t.indexOf(\"$\") == 0\n        ).join(\",\");\n\n        const intervalGroups = _.groupBy(targets, t => t.interval);\n        const intervals = Object.keys(intervalGroups);\n        const queries = _.map(intervals, key => ({\n            interval: key,\n            sheet: _.map(intervalGroups[key], target => (variables && variables.length) ?\n                [variables, target.target].join(\",\") :\n                target.target)\n        }));\n\n        options.queries = _.map(queries, q => {\n            if (adHoc.name !== null) {\n                const filterStr = this.buildAdhocString(adHoc.conditions);\n                const filterRx = new RegExp(`AND_\\\\$${adHoc.name}`, 'g')\n                const valueRx = new RegExp(`\\\\$${adHoc.name}`, 'g')\n\n                q.sheet = q.sheet.map((query) => {\n                    return (filterStr.length\n                            ? query.replace(filterRx, \"AND \" + filterStr)\n                            : query.replace(filterRx, \"\")\n                    ).replace(valueRx, filterStr);\n                })\n            }\n\n            queryTpl.sheet = q.sheet;\n            queryTpl.time.interval = !q.interval || q.interval === 'undefined' ? 'auto' : q.interval;\n            return _.cloneDeep(queryTpl);\n        });\n        return options;\n    }\n}\n"]}